:mod:`ape_ethereum.ecosystem`
=============================

.. py:module:: ape_ethereum.ecosystem




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape_ethereum.ecosystem.Transaction
   ape_ethereum.ecosystem.Receipt
   ape_ethereum.ecosystem.Ethereum




**Attributes**:

.. autoapisummary::

   ape_ethereum.ecosystem.NETWORKS



-----------


.. data:: NETWORKS
   

   



.. py:class:: Transaction

   Bases: :py:obj:`ape.api.TransactionAPI`

   .. py:method:: is_valid(self) -> bool


   .. py:method:: as_dict(self) -> dict


   .. py:method:: encode(self) -> bytes

      Take this object and produce a hash to sign to submit a transaction





.. py:class:: Receipt

   Bases: :py:obj:`ape.api.ReceiptAPI`

   .. py:method:: decode(cls, data: dict) -> ape.api.ReceiptAPI
      :classmethod:





.. py:class:: Ethereum

   Bases: :py:obj:`ape.api.EcosystemAPI`

   An Ecosystem is a set of related Networks

   .. attribute:: transaction_class
      

      

   .. attribute:: receipt_class
      

      

   .. py:method:: encode_calldata(self, abi: ape.types.ABI, *args) -> bytes


   .. py:method:: decode_calldata(self, abi: ape.types.ABI, raw_data: bytes) -> Any


   .. py:method:: encode_deployment(self, deployment_bytecode: bytes, abi: Optional[ape.types.ABI], *args, **kwargs) -> Transaction


   .. py:method:: encode_transaction(self, address: ape.types.AddressType, abi: ape.types.ABI, *args, **kwargs) -> Transaction


   .. py:method:: decode_event(self, abi: ape.types.ABI, receipt: ape.api.ReceiptAPI) -> ape.api.ContractLog




