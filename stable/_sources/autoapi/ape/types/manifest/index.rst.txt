:mod:`ape.types.manifest`
=========================

.. py:module:: ape.types.manifest




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.types.manifest.PackageMeta
   ape.types.manifest.PackageManifest





-----------


.. py:class:: PackageMeta

   Bases: :py:obj:`ape.types.abstract.SerializableType`

   .. attribute:: authors
      :annotation: :Optional[List[str]]

      

   .. attribute:: license
      :annotation: :Optional[str]

      

   .. attribute:: description
      :annotation: :Optional[str]

      

   .. attribute:: keywords
      :annotation: :Optional[List[str]]

      

   .. attribute:: links
      :annotation: :Optional[Dict[str, str]]

      




.. py:class:: PackageManifest

   Bases: :py:obj:`ape.types.abstract.FileMixin`, :py:obj:`ape.types.abstract.SerializableType`

   .. attribute:: manifest
      :annotation: :str = ethpm/3

      

   .. attribute:: name
      :annotation: :Optional[str]

      

   .. attribute:: version
      :annotation: :Optional[str]

      

   .. attribute:: meta
      :annotation: :Optional[PackageMeta]

      

   .. attribute:: sources
      :annotation: :Optional[Dict[str, ape.types.contract.Source]]

      

   .. attribute:: contractTypes
      :annotation: :Optional[Dict[str, ape.types.contract.ContractType]]

      

   .. attribute:: compilers
      :annotation: :Optional[List[ape.types.contract.Compiler]]

      

   .. attribute:: deployments
      :annotation: :Optional[Dict[str, Dict[str, ape.types.contract.ContractInstance]]]

      

   .. attribute:: buildDependencies
      :annotation: :Optional[Dict[str, str]]

      

   .. py:method:: __getattr__(self, attr_name: str)


   .. py:method:: from_dict(cls, params: Dict)
      :classmethod:




