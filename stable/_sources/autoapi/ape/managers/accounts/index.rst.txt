:mod:`ape.managers.accounts`
============================

.. py:module:: ape.managers.accounts




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.managers.accounts.AccountManager





-----------


.. py:class:: AccountManager

   Accounts is a container of containers for AccountAPI objects
   All containers must subclass AccountContainerAPI, and are treated as singletons

   .. attribute:: config
      :annotation: :ape.managers.config.ConfigManager

      

   .. attribute:: converters
      :annotation: :ape.managers.converters.ConversionManager

      

   .. attribute:: plugin_manager
      :annotation: :pluggy.PluginManager

      

   .. attribute:: network_manager
      :annotation: :ape.managers.networks.NetworkManager

      

   .. py:method:: containers(self) -> Dict[str, ape.api.accounts.AccountContainerAPI]


   .. py:method:: aliases(self) -> Iterator[str]
      :property:


   .. py:method:: __len__(self) -> int


   .. py:method:: __iter__(self) -> Iterator[ape.api.accounts.AccountAPI]


   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: load(self, alias: str) -> ape.api.accounts.AccountAPI


   .. py:method:: __getitem__(self, account_id) -> ape.api.accounts.AccountAPI
      :abstractmethod:


   .. py:method:: __getitem_int(self, account_id: int) -> ape.api.accounts.AccountAPI


   .. py:method:: __getitem_str(self, account_str: str) -> ape.api.accounts.AccountAPI


   .. py:method:: __contains__(self, address: ape.types.AddressType) -> bool




