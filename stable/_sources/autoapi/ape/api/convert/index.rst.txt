:mod:`ape.api.convert`
======================

.. py:module:: ape.api.convert




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.api.convert.ConverterAPI




**Attributes**:

.. autoapisummary::

   ape.api.convert.ConvertedType



-----------


.. data:: ConvertedType
   

   



.. py:class:: ConverterAPI

   Bases: :py:obj:`Generic`\ [\ :py:obj:`ConvertedType`\ ]

   Abstract base class for generic types.

   A generic type is typically declared by inheriting from
   this class parameterized with one or more type variables.
   For example, a generic mapping type might be defined as::

     class Mapping(Generic[KT, VT]):
         def __getitem__(self, key: KT) -> VT:
             ...
         # Etc.

   This class can then be used as follows::

     def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
         try:
             return mapping[key]
         except KeyError:
             return default

   .. attribute:: config
      :annotation: :ape.api.config.ConfigItem

      

   .. attribute:: networks
      :annotation: :ape.managers.networks.NetworkManager

      

   .. py:method:: is_convertible(self, value: Any) -> bool
      :abstractmethod:

      Returns `True` if string value provided by `value` is convertible using
      `self.convert(value)`


   .. py:method:: convert(self, value: Any) -> ConvertedType
      :abstractmethod:

      Implements any conversion logic on `value` to produce `ABIType`.

      Must throw if not convertible.




