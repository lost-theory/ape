:mod:`ape.api.contracts`
========================

.. py:module:: ape.api.contracts




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.api.contracts.ContractConstructor
   ape.api.contracts.ContractCall
   ape.api.contracts.ContractCallHandler
   ape.api.contracts.ContractTransaction
   ape.api.contracts.ContractTransactionHandler
   ape.api.contracts.ContractLog
   ape.api.contracts.ContractEvent
   ape.api.contracts.ContractInstance
   ape.api.contracts.ContractContainer



**Functions**:

.. autoapisummary::

   ape.api.contracts._Contract




-----------


.. py:class:: ContractConstructor

   .. attribute:: deployment_bytecode
      :annotation: :bytes

      

   .. attribute:: abi
      :annotation: :Optional[ape.types.ABI]

      

   .. attribute:: provider
      :annotation: :ape.api.providers.ProviderAPI

      

   .. py:method:: __post_init__(self)


   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: encode(self, *args, **kwargs) -> ape.api.providers.TransactionAPI


   .. py:method:: __call__(self, *args, **kwargs) -> ape.api.providers.ReceiptAPI





.. py:class:: ContractCall

   .. attribute:: abi
      :annotation: :ape.types.ABI

      

   .. attribute:: address
      :annotation: :ape.types.AddressType

      

   .. attribute:: provider
      :annotation: :ape.api.providers.ProviderAPI

      

   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: encode(self, *args, **kwargs) -> ape.api.providers.TransactionAPI


   .. py:method:: __call__(self, *args, **kwargs) -> Any





.. py:class:: ContractCallHandler

   .. attribute:: provider
      :annotation: :ape.api.providers.ProviderAPI

      

   .. attribute:: address
      :annotation: :ape.types.AddressType

      

   .. attribute:: abis
      :annotation: :List[ape.types.ABI]

      

   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: __call__(self, *args, **kwargs) -> Any





.. py:class:: ContractTransaction

   .. attribute:: abi
      :annotation: :ape.types.ABI

      

   .. attribute:: address
      :annotation: :ape.types.AddressType

      

   .. attribute:: provider
      :annotation: :ape.api.providers.ProviderAPI

      

   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: encode(self, *args, **kwargs) -> ape.api.providers.TransactionAPI


   .. py:method:: __call__(self, *args, **kwargs) -> ape.api.providers.ReceiptAPI





.. py:class:: ContractTransactionHandler

   .. attribute:: provider
      :annotation: :ape.api.providers.ProviderAPI

      

   .. attribute:: address
      :annotation: :ape.types.AddressType

      

   .. attribute:: abis
      :annotation: :List[ape.types.ABI]

      

   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: __call__(self, *args, **kwargs) -> ape.api.providers.ReceiptAPI





.. py:class:: ContractLog

   .. attribute:: name
      :annotation: :str

      

   .. attribute:: data
      :annotation: :Dict[str, Any]

      




.. py:class:: ContractEvent

   .. attribute:: provider
      :annotation: :ape.api.providers.ProviderAPI

      

   .. attribute:: address
      :annotation: :str

      

   .. attribute:: abis
      :annotation: :List[ape.types.ABI]

      

   .. attribute:: cached_logs
      :annotation: :List[ContractLog] = []

      




.. py:class:: ContractInstance

   Bases: :py:obj:`ape.api.address.AddressAPI`

   .. attribute:: _address
      :annotation: :ape.types.AddressType

      

   .. attribute:: _contract_type
      :annotation: :ape.types.ContractType

      

   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: address(self) -> ape.types.AddressType
      :property:


   .. py:method:: __dir__(self) -> List[str]

      Default dir() implementation.


   .. py:method:: __getattr__(self, attr_name: str) -> Any





.. py:class:: ContractContainer

   .. attribute:: _provider
      :annotation: :ape.api.providers.ProviderAPI

      

   .. attribute:: _contract_type
      :annotation: :ape.types.ContractType

      

   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: at(self, address: str) -> ContractInstance


   .. py:method:: _deployment_bytecode(self) -> bytes
      :property:


   .. py:method:: _runtime_bytecode(self) -> bytes
      :property:


   .. py:method:: __call__(self, *args, **kwargs) -> ape.api.providers.TransactionAPI





.. py:function:: _Contract(address: Union[str, ape.api.address.AddressAPI, ape.types.AddressType], networks: ape.managers.networks.NetworkManager, converters: ape.managers.converters.ConversionManager, contract_type: Optional[ape.types.ContractType] = None) -> ape.api.address.AddressAPI

   Function used to triage whether we have a contract type available for
   the given address/network combo, or explicitly provided. If none are found,
   returns a simple ``Address`` instance instead of throwing (provides a warning)



