:mod:`ape.api.providers`
========================

.. py:module:: ape.api.providers




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.api.providers.TransactionAPI
   ape.api.providers.TransactionStatusEnum
   ape.api.providers.ReceiptAPI
   ape.api.providers.ProviderAPI





-----------


.. py:class:: TransactionAPI

   .. attribute:: chain_id
      :annotation: :int = 0

      

   .. attribute:: sender
      :annotation: :str = 

      

   .. attribute:: receiver
      :annotation: :str = 

      

   .. attribute:: nonce
      :annotation: :Optional[int]

      

   .. attribute:: value
      :annotation: :int = 0

      

   .. attribute:: gas_limit
      :annotation: :Optional[int]

      

   .. attribute:: gas_price
      :annotation: :Optional[int]

      

   .. attribute:: data
      :annotation: :bytes = b''

      

   .. attribute:: signature
      :annotation: :Optional[eth_account.datastructures.SignedTransaction]

      

   .. py:method:: __post_init__(self)


   .. py:method:: is_valid(self)
      :property:


   .. py:method:: encode(self) -> bytes
      :abstractmethod:

      Take this object and produce a hash to sign to submit a transaction


   .. py:method:: as_dict(self) -> dict


   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: __str__(self) -> str

      Return str(self).





.. py:class:: TransactionStatusEnum

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. attribute:: failing
      :annotation: = 0

      

   .. attribute:: no_error
      :annotation: = 1

      




.. py:class:: ReceiptAPI

   .. attribute:: txn_hash
      :annotation: :str

      

   .. attribute:: status
      :annotation: :TransactionStatusEnum

      

   .. attribute:: block_number
      :annotation: :int

      

   .. attribute:: gas_used
      :annotation: :int

      

   .. attribute:: gas_price
      :annotation: :int

      

   .. attribute:: logs
      :annotation: :List[dict] = []

      

   .. attribute:: contract_address
      :annotation: :Optional[str]

      

   .. py:method:: __post_init__(self)


   .. py:method:: __str__(self) -> str

      Return str(self).


   .. py:method:: decode(cls, data: dict) -> ReceiptAPI
      :classmethod:
      :abstractmethod:





.. py:class:: ProviderAPI

   A Provider must work with a particular Network in a particular Ecosystem

   .. attribute:: name
      :annotation: :str

      

   .. attribute:: network
      :annotation: :ape.api.networks.NetworkAPI

      

   .. attribute:: config
      :annotation: :ape.api.config.ConfigItem

      

   .. attribute:: provider_settings
      :annotation: :dict

      

   .. attribute:: data_folder
      :annotation: :pathlib.Path

      

   .. attribute:: request_header
      :annotation: :str

      

   .. py:method:: connect(self)
      :abstractmethod:


   .. py:method:: disconnect(self)
      :abstractmethod:


   .. py:method:: update_settings(self, new_settings: dict)
      :abstractmethod:


   .. py:method:: chain_id(self) -> int
      :property:


   .. py:method:: get_balance(self, address: str) -> int
      :abstractmethod:


   .. py:method:: get_code(self, address: str) -> bytes
      :abstractmethod:


   .. py:method:: get_nonce(self, address: str) -> int
      :abstractmethod:


   .. py:method:: estimate_gas_cost(self, txn: TransactionAPI) -> int
      :abstractmethod:


   .. py:method:: gas_price(self) -> int
      :property:


   .. py:method:: send_call(self, txn: TransactionAPI) -> bytes
      :abstractmethod:


   .. py:method:: get_transaction(self, txn_hash: str) -> ReceiptAPI
      :abstractmethod:


   .. py:method:: send_transaction(self, txn: TransactionAPI) -> ReceiptAPI
      :abstractmethod:


   .. py:method:: get_events(self, **filter_params) -> Iterator[dict]
      :abstractmethod:




