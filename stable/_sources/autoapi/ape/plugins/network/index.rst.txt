:mod:`ape.plugins.network`
==========================

.. py:module:: ape.plugins.network




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.plugins.network.EcosystemPlugin
   ape.plugins.network.NetworkPlugin
   ape.plugins.network.ProviderPlugin
   ape.plugins.network.ExplorerPlugin





-----------


.. py:class:: EcosystemPlugin

   Bases: :py:obj:`ape.plugins.pluggy_patch.PluginType`

   .. py:method:: ecosystems(self) -> Iterator[Type[ape.api.EcosystemAPI]]

      Must return an iterator of EcosystemAPI subclasses





.. py:class:: NetworkPlugin

   Bases: :py:obj:`ape.plugins.pluggy_patch.PluginType`

   .. py:method:: networks(self) -> Iterator[Tuple[str, str, Type[ape.api.NetworkAPI]]]

      Must return an iterator of tuples of:
          the target Ecosystem plugin's name
          the Network name
          a NetworkAPI subclass





.. py:class:: ProviderPlugin

   Bases: :py:obj:`ape.plugins.pluggy_patch.PluginType`

   .. py:method:: providers(self) -> Iterator[Tuple[str, str, Type[ape.api.ProviderAPI]]]

      Must return an iterator of tuples of:
          the target Ecosystem plugin's name
          the Network it works with (which must be valid Network in the Ecosystem)
          a ProviderAPI subclass





.. py:class:: ExplorerPlugin

   Bases: :py:obj:`ape.plugins.pluggy_patch.PluginType`

   .. py:method:: explorers(self) -> Iterator[Tuple[str, str, Type[ape.api.ExplorerAPI]]]

      Must return an iterator of tuples of:
          the target Ecosystem plugin's name
          the Network it works with (which must be valid Network in the Ecosystem)
          a ExplorerAPI subclass




