:mod:`ape_ethereum`
===================

.. py:module:: ape_ethereum



.. raw:: html

   <h3>Submodules</h3>

.. toctree::
   :titlesonly:
   :maxdepth: 1

   converters/index.rst
   ecosystem/index.rst




.. raw:: html

   <h3>Package Contents</h3>

**Classes**:

.. autoapisummary::

   ape_ethereum.WeiConversions
   ape_ethereum.Ethereum



**Functions**:

.. autoapisummary::

   ape_ethereum.converters
   ape_ethereum.ecosystems
   ape_ethereum.networks



**Attributes**:

.. autoapisummary::

   ape_ethereum.NETWORKS



-----------


.. py:class:: WeiConversions

   Bases: :py:obj:`ape.api.ConverterAPI`

   Converts units like `1 ether` to 1e18 wei

   .. py:method:: is_convertible(self, value: str) -> bool

      Returns `True` if string value provided by `value` is convertible using
      `self.convert(value)`


   .. py:method:: convert(self, value: str) -> int

      Implements any conversion logic on `value` to produce `ABIType`.

      Must throw if not convertible.





.. data:: NETWORKS
   

   



.. py:class:: Ethereum

   Bases: :py:obj:`ape.api.EcosystemAPI`

   An Ecosystem is a set of related Networks

   .. attribute:: transaction_class
      

      

   .. attribute:: receipt_class
      

      

   .. py:method:: encode_calldata(self, abi: ape.types.ABI, *args) -> bytes


   .. py:method:: decode_calldata(self, abi: ape.types.ABI, raw_data: bytes) -> Any


   .. py:method:: encode_deployment(self, deployment_bytecode: bytes, abi: Optional[ape.types.ABI], *args, **kwargs) -> Transaction


   .. py:method:: encode_transaction(self, address: ape.types.AddressType, abi: ape.types.ABI, *args, **kwargs) -> Transaction


   .. py:method:: decode_event(self, abi: ape.types.ABI, receipt: ape.api.ReceiptAPI) -> ape.api.ContractLog





.. py:function:: converters()




.. py:function:: ecosystems()




.. py:function:: networks()



