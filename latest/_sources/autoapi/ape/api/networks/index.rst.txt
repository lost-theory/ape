:mod:`ape.api.networks`
=======================

.. py:module:: ape.api.networks




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.api.networks.EcosystemAPI
   ape.api.networks.ProviderContextManager
   ape.api.networks.NetworkAPI



**Functions**:

.. autoapisummary::

   ape.api.networks.create_network_type




-----------


.. py:class:: EcosystemAPI

   An Ecosystem is a set of related Networks

   .. attribute:: name
      :annotation: :str

      

   .. attribute:: network_manager
      :annotation: :ape.managers.networks.NetworkManager

      

   .. attribute:: config_manager
      :annotation: :ape.managers.config.ConfigManager

      

   .. attribute:: plugin_manager
      :annotation: :pluggy.PluginManager

      

   .. attribute:: data_folder
      :annotation: :pathlib.Path

      

   .. attribute:: request_header
      :annotation: :str

      

   .. attribute:: transaction_class
      :annotation: :Type[ape.api.providers.TransactionAPI]

      

   .. attribute:: receipt_class
      :annotation: :Type[ape.api.providers.ReceiptAPI]

      

   .. attribute:: _default_network
      :annotation: :str = development

      

   .. py:method:: config(self) -> ape.api.config.ConfigItem


   .. py:method:: networks(self) -> Dict[str, NetworkAPI]


   .. py:method:: __post_init__(self)


   .. py:method:: __iter__(self) -> Iterator[str]

      Provides the set of all valid Network names in the ecosystem


   .. py:method:: __getitem__(self, network_name: str) -> NetworkAPI


   .. py:method:: __getattr__(self, network_name: str) -> NetworkAPI


   .. py:method:: add_network(self, network_name: str, network: NetworkAPI)

      Used to attach new networks to an ecosystem (e.g. L2 networks like Optimism)


   .. py:method:: default_network(self) -> str
      :property:


   .. py:method:: set_default_network(self, network_name: str)


   .. py:method:: encode_deployment(self, deployment_bytecode: bytes, abi: Optional[ape.types.ABI], *args, **kwargs) -> ape.api.providers.TransactionAPI
      :abstractmethod:


   .. py:method:: encode_transaction(self, address: ape.types.AddressType, abi: ape.types.ABI, *args, **kwargs) -> ape.api.providers.TransactionAPI
      :abstractmethod:


   .. py:method:: decode_event(self, abi: ape.types.ABI, receipt: ape.api.providers.ReceiptAPI) -> ape.api.contracts.ContractLog
      :abstractmethod:





.. py:class:: ProviderContextManager(network_manager: ape.managers.networks.NetworkManager, provider: ape.api.providers.ProviderAPI)

   .. attribute:: _connected_providers
      :annotation: :List[ape.api.providers.ProviderAPI] = []

      

   .. py:method:: __init__(self, network_manager: ape.managers.networks.NetworkManager, provider: ape.api.providers.ProviderAPI)


   .. py:method:: __enter__(self, *args, **kwargs)


   .. py:method:: __exit__(self, *args, **kwargs)





.. py:class:: NetworkAPI

   A Network is a wrapper around a Provider for a specific Ecosystem.

   .. attribute:: name
      :annotation: :str

      

   .. attribute:: ecosystem
      :annotation: :EcosystemAPI

      

   .. attribute:: config_manager
      :annotation: :ape.managers.config.ConfigManager

      

   .. attribute:: plugin_manager
      :annotation: :pluggy.PluginManager

      

   .. attribute:: data_folder
      :annotation: :pathlib.Path

      

   .. attribute:: request_header
      :annotation: :str

      

   .. attribute:: _default_provider
      :annotation: :str = 

      

   .. py:method:: config(self) -> ape.api.config.ConfigItem


   .. py:method:: chain_id(self) -> int
      :property:


   .. py:method:: network_id(self) -> int
      :property:


   .. py:method:: explorer(self) -> Optional[ape.api.explorers.ExplorerAPI]


   .. py:method:: providers(self)


   .. py:method:: use_provider(self, provider_name: str, provider_settings: dict = None) -> ProviderContextManager


   .. py:method:: default_provider(self) -> str
      :property:


   .. py:method:: set_default_provider(self, provider_name: str)


   .. py:method:: use_default_provider(self) -> ProviderContextManager





.. py:function:: create_network_type(chain_id: int, network_id: int) -> Type[NetworkAPI]

   Helper function that allows creating a :class:`NetworkAPI` subclass easily.



