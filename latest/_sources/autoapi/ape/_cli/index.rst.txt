:mod:`ape._cli`
===============

.. py:module:: ape._cli




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape._cli.ApeCLI



**Functions**:

.. autoapisummary::

   ape._cli.display_config
   ape._cli.cli




-----------


.. py:function:: display_config(ctx, param, value)




.. py:class:: ApeCLI(name: Optional[str] = None, invoke_without_command: bool = False, no_args_is_help: Optional[bool] = None, subcommand_metavar: Optional[str] = None, chain: bool = False, result_callback: Optional[Callable[Ellipsis, Any]] = None, **attrs: Any)

   Bases: :py:obj:`click.MultiCommand`

   A multi command is the basic implementation of a command that
   dispatches to subcommands.  The most common version is the
   :class:`Group`.

   :param invoke_without_command: this controls how the multi command itself
                                  is invoked.  By default it's only invoked
                                  if a subcommand is provided.
   :param no_args_is_help: this controls what happens if no arguments are
                           provided.  This option is enabled by default if
                           `invoke_without_command` is disabled or disabled
                           if it's enabled.  If enabled this will add
                           ``--help`` as argument if no arguments are
                           passed.
   :param subcommand_metavar: the string that is used in the documentation
                              to indicate the subcommand place.
   :param chain: if this is set to `True` chaining of multiple subcommands
                 is enabled.  This restricts the form of commands in that
                 they cannot have optional arguments but it allows
                 multiple commands to be chained together.
   :param result_callback: The result callback to attach to this multi
       command. This can be set or changed later with the
       :meth:`result_callback` decorator.

   .. attribute:: _commands
      

      

   .. py:method:: commands(self) -> Dict
      :property:


   .. py:method:: list_commands(self, ctx)

      Returns a list of subcommand names in the order they should
      appear.


   .. py:method:: get_command(self, ctx, name)

      Given a context and a command name, this returns a
      :class:`Command` object if it exists or returns `None`.





.. py:function:: cli()



